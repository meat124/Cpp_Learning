10-4강 string 과 string_view

-basic_string
-유니코드와 여러가지 인코딩 방식
-string_view


- basic_string
std::string 은 basic_string 이라는 클래스 템플릿의 인스턴스화 버전이다.

basic_string 에는 총 5가지의 인스턴스화 된 문자열이 있다.
1. std::string
2. std::wstring : wchar_t 의 크기는 시스템마다 다름. 윈도우에서는 2바이트, 유닉스 시스템에서는 4바이트이다.
3. std::u8string : char8_t 는 1바이트; UTF-8 문자열을 보관 가능
4. std::u16string : char16_t 는 2바이트; UTF-16 문자열을 보관 가능
5. std::u32string : char32_t 는 4바이트; UTF-32 문자열을 보관 가능

basic_string 에 템플릿 인자들을 살펴본다.
Traits 는 주어진 CharT 문자들에 대해 기본적인 문자열 연산들을 정의해놓은 클래스를 의미한다.
즉 basic_string 에 정의된 문자열 연산들은 거의 다 Traits 의 기본적인 문자열 연산들을 가지고 정의되어 있다.
그 덕분에 문자열을 보관하는 로직과 문자열 연산 로직이 서로 분리될 수 있다.
전자는 basic_string 에서, 후자는 Traits 에서 담당한다.

이렇게 로직을 분리한 이유 : 사용자에게 좀 더 자유를 부여하기 위해서
> 예를 들어 string 처럼 char 이 기본 타입인 문자열에서 문자열 비교시 대소문자 구분을 하지 않는 버전을 만들고 싶다면?
> Traits 에서 문자열들을 비교하는 부분만 살짝 바꿔주면 된다.
만약 분리가 되어있지 않았다면 basic_string 에서 문자열 비교 부분을 모두 찾아서 고쳐야 했을 것이다.

아스키 테이블에서 숫자들의 값이 알파벳보다 작아서 더 앞에 온다.
이를 바꿔서 숫자들이 문자들보다 우선순위가 낮은 문자열을 만들어 본다.

char_traits 에 정의되는 함수들은 모두 static 함수들이다. Traits 는 문자와 문자열들 간에 간단한 연산을 제공해주는 클래스이므로, 굳이 데이터를 저장할 필요가 없기 때문이다.
>> 이를 stateless 라고 한다.

문자들 간의 크기를 비교하는 lt 함수와, 길이가 n 인 문자열의 크기를 비교하는 compare 함수를 새로 정의해 주어야 한다.

get_real_rank 함수는 문자를 받아서 숫자면 256 을 더해서 아스키 코드 값의 순위를 매우 떨어뜨린다.
따라서 이렇게 되면 숫자들은 모두 문자보다 아스키 코드 값이 뒤에 오게 된다.

이렇게 Traits 를 바꿔주는 것으로도 좀 더 커스터마이징 된 basic_string 을 사용할 수 있다.

- 짧은 문자열 최적화(SSO)

메모리를 할당하는 작업은 시간을 꽤나 많이 잡아먹는 작업이다.
basic_string 이 저장하는 문자열의 크기는 다 다르다.
이때 긴 문자열은 동적으로 할당하는 것이 유리하지만, 상대적으로 짧은 문자열은 굉장히 많이 생성되고 소멸되므로 동적으로 메모리를 할당한다면 매우 비효율적이다.
따라서 basic_string 의 개발자들은 짧은 길이 문자열의 경우, 따로 문자 데이터를 위한 메모리를 할당하는 대신에 그냥 객체 자체에 저장해 버렸다.
이를 짧은 문자열 최적화(short string optimization - SSO) 이라 부른다.

- 문자열 리터럴 정의하기
C 에서는 문자열 리터럴을 정의하기 위해 다음과 같은 코드를 작성했다.
const char* s = "hello";
or
char s[] = "hello";

그렇다면 C++ 은 어떻게 할까?
auto str = "hello"; 
> 위의 코드는 string으로 정의되지 않는다. const char* 로 정의된다.

문자열을 만들고 싶다면 꼭 타입을 명시해줘야 한다.
하지만 C++ 14 에서 이러한 문제를 해결할 수 있는 방법이 나왔다.
바로 리터럴 연산자이다.
auto str = "hello"s;
즉 "" 뒤에 s 를 붙여주면 auto 가 자동으로 string 으로 추론한다.
이 리터럴 연산자는
std::string operator""s(const char * str, std::size_t len);
으로 정의되어 있다. 즉 컴파일 과정에서 "hello"s 는  operator""s("hello", 5); 으로 바뀌게 된다.
해당 리터럴 연산자를 사용하기 위해서는 std::string_literals 네임스페이스를 사용해야 한다.

그냥 "hello" 를 했다면 char 배열을 생성하게 된다.
하지만 wchar_t 문자열을 만들고 싶다면 앞에 L 을 붙여주면 된다. 그러면 컴파일러가 알아서 wchar_t 배열을 만들어 준다.
C++ 11 에 추가된 기능으로 Raw string literal 이라는 것이 생겼다.
R"()" 안에 오는 문자들은 문자 그대로 char 배열 안에 들어가게 된다.
이전에는 "" 안에 \ 를 입력하기 위해서 \\ 와 같이 써야했고 " 를 입력하려면 \" 와 같이 해야 했다.
하지만 Raw string literal 를 사용하면 그러지 않아도 된다.
개행문자 \n 도 그대로 잘 들어간다.

그런데 닫는 괄호 )" 를 문자열에 넣을 수 없다. 하지만 이는 구분문자를 추가함으로 해결할 수 있다.

- C++ 에서 한글 다루기
컴퓨터가 만들어진 초창기에는 영미권 국가에서 사용이 대부분이었으므로 문자를 표현하는데 1바이트로 충분했다.
하지만 전세계적으로 컴퓨터가 보급되면서 모든 문자들을 컴퓨터로 표현할 수 있도록 설계된 표준이 유니코드이다.
유니코드는 모든 문자들에 고유의 값을 부여하게 된다.(요즘에는 이모지도 가능)

예를 들어 한글의 '가' 는 0xAC00 의 값을 부여받았다. 그 다음에 오는 문자가 '각' 으로 0xAC01 이 된다.
0부터 0x7F 까지는 기존에 사용하던 아스키 테이블과 호환을 위해 동일하다.
즉, 영어 알파벳 'A' 의 경우 0x41 이다.
현재 유니코드에 등록되어 있는 문자들의 개수는 대략 14만개 정도 된다.
따라서 문자 하나를 한 개의 자료형에 보관하기 위해서는 최소 int 이상의 자료형을 사용해야 한다.
하지만 모든 문자들을 4바이트씩 지정해서 표현하는 것은 매우 비효율적이다.

예를 들어 전체 텍스트가 모두 영어라면 어짜피 영문자는 0~127 사이이므로 1바이트 문자만 사용해도 모두 표현 가능하기 때문
따라서 이를 해결하기 위해 인코딩(encoding) 방식이 등장한다.
인코딩 방식에 따라 컴퓨터에서 문자를 표현하기 위해 동일하게 4바이트를 사용하는 대신에, 어떤 문자는 1 바이트, 어떤 문자는 2바이트..등등의 길이로 저장하게 된다.
유니코드에서는 3가지 형식의 인코딩 방식을 지원하고 있다.
1. UTF-8 : 문자를 최소 1부터 최대 4바이트로 표현한다.(즉, 문자마다 길이가 다르다.)
2. UTF-16 : 문자를 2 혹은 4바이트로 표현한다.
3. UTF-32 : 문자를 4바이트로 표현한다.
UTF-32 의 경우 모든 문자들을 4바이트로 할당하기 때문에 다루기가 매우 간편하다.
하지만 직관적이기는 하지만 자주 사용되는 인코딩 방식은 아니다. 왜냐하면 모든 문자에 4바이트씩 할당하는 것이 매우 비효율적이기 때문이다.

UTF-8 인코딩의 경우, 현재 웹 상에서 많이 사용된다.
UTF-8 형식의 문자열을 만들기 위해서는, "" 앞에 u8 을 써주거나, 대부분 시스템의 경우 굳이 안붙여도 파일의 형식이UTF-8 일것이다.
문자열의 길이는 16 인데 32 라는 결과가 나오는 이유는 무엇일까?
> UTF-8 인코딩 방식이 문자들에 최소 1바이트 부터, 최대 4바이트까지 지정하기 때문이다. 일단 최소 단위가 1바이트이므로, UTF-8 인코딩 방식의 문자열은 char 원소들로 보관하는데, 어떤 문자는 char 1개 만으로도 충분하고, 어떤 원소는 char 원소 2개 ,3개 아니면 4개까지 필요로 하게 된다.

작동 방식은 다음과 같다.
0 ~ 0x7F 까지의 문자들은 1바이트
0x80 ~ 0x7FF 까지의 문자들은 2바이트
0x800 ~ 0xFFFF 까지는 3바이트
나머지는 모두 4바이트로 지정
한글의 경우 0xAC00 부터 0xD7AF 까지 걸쳐있으므로 전부 3바이트로 표현된다.
"이건 UTF-8 문자열 입니다" 에는 한글이 8개 있고, 영어 알파벳, 공백 문자, - 가 8개 있다.
한글은 3바이트, 나머지는 1바이트로 표현되므로 총 3*8 + 1*8 = 32 >> 따라서 32개의 char 이 필요하다.
std::string 은 문자열이 어떤 인코딩으로 이루어져 있는지 관심이 없다. 단순히 char 의 나열로 이뤄져 있다고 생각한다.
따라서 str.size() 를 했을 때, 문자열의 실제 길이가 아니라 그냥 char이 몇 개가 있는지 알려준다.

문제는 string 단어에서 각각의 문자를 구분하지 못하기 때문에 불편한게 있다.
만약 두 번째 문자를 추출하고 싶다면 str[1] 을 하면 될 것 같지만 실제로는 이상한 결과가 나온다.
실제로는 첫 번째 문자의 UTF-8 인코딩의 두 번째 바이트가 나오는 것이다.
그렇지만 C++ 에서 UTF-8 문자열을 분석할 수 없진 않다.
하나하나 읽어가면서 한글이 나오면 3바이트를 읽고 하면 된다.

하지만 그렇게 해도 한글을 다루긴 불편하다.
UTF-16 인코딩을 사용하면 좀 더 편하게 다룰 수 있다.
UTF-16 인코딩은 최소 단위가 2바이트이다. 따라서 UTF-16 으로 인코딩 된 문자열을 저장하는 클래스인 u16string 도 원소의 타입이 2바이트(char16_t) 이다.
UTF-16 은 유니코드에서 0부터 D7FF 까지, 그리고 E000 부터 FFFF 까지의 문자들을 2바이트로 인코딩한다.
그리고 FFFF 보다 큰 문자들은 4바이트로 인코딩 한다.
참고로 D800 ~ DFFF 사이의 문자들은 유니코드 상 존재하지 않는 문자들이다.

덕분에 UTF-16 인코딩 방식으로는 대부분의 문자들이 2바이트로 인코딩 된다.
알파벳, 한글, 한자 전부 다 이다.
이모지나 이집트 상형문자와 같이 유니코드 상 높은 번호로 매핑되어 있는 문자들은 4바이트로 인코딩된다.

거의 대부분의 문자들이 2바이트로 인코딩 되므로, 일반적인 문자들만 수록되어 있는 텍스트를 다룬다면 UTF-16 으로 인코딩하는 것이 바람직하다.

함수에 문자열 리터럴을 전달하면 이는 const char* 형태이고, 인자는 string 만 받을 수 있으므로 암묵적으로 string 객체가 생성되낟.
따라서 불필요한 메모리 할당이 발생한다.
contains_very 함수를 const char* 형태의 인자를 받도록 바꾸면 어떻게 될까?
> 먼저 string 함수를 직접 전달 불가능하고, c_str 함수를 통해서 string 을 const char* 형태로 변경해서 주소값을 뽑아내야 한다.
> const char* 로 변환하는 과정에서 문자열의 길이에 대한 정보를 잃어버린다. 만약 함수 내부에서 문자열의 길이 정보가 필요하다면
매 번 다시 계산해야한다.

따라서 contains_very 함수를 합리적으로 만들기 위해서는 const string& 을 인자로 받는 오버로딩 하나, 그리고 const char* 를 인자로 받는 오버로딩 하나를 각각 준비해야 하는 문제점이 있다.
하지만 이 문제는 C++ 17 에서 string_view 가 도입되면서 해결된다.

string_view 는 이름 그대로 문자열을 읽기만 하는 클래스이다. 따라서 문자열을 소유하지 않는다. 즉 어딘가 존재하는 문자열을 참조해서 읽기만 하는 것이다. 따라서 string_view 가 현재 보고 있는 문자열이 소멸된다면 정의되지 않은 작업 오류가 발생한다.

따라서 string_view 는 문자열을 소유하고 있지 않으므로 현재 읽고 있는 문자열이 소멸되지 않은 상태인지 주의해야 한다.

소유하지 않고, 읽기만 한다는 특성 때문에, string_view 객체 생성 시에 메모리 할당이 불필요하다. 그냥 읽고 있는 문자열의 시작 주소값만 복사하면 된다.
따라서 string 이나 const char* 를 전달하더라도 메모리 할당이 발생하지 않는다.

뿐만 아니라 const char* 을 인자로 받았을 때에 비해 string 의 경우 문자열 길이가 그대로 전달되므로 불필요한 문자열 길이 계산을 할 필요가 없다. 또한 const char* 에서 string_view 를 생성하면서 문자열 길이를 한 번만 계산하면 되므로 효율적이다.

string_view 에서 제공하는 연산들은 당연히도 원본 문자열을 수정하지 않는 연산들이다.
find, substr 의 경우가 있다.
특히 string 의 경우, substr 이 실제로 부분 문자열을 새로 생성하기 때문에 O(n) 으로 수행되지만, string_view 의 경우, substr 이 또 다른 view 를 생성하므로, O(1) 로 매우 빠르게 수행된다.

정리
1. std::string 은 basic_string 의 char 을 인자로 갖는 템플릿 인스턴스화 버전이다.
2. std::char_traits 를 사용해서 사용자가 원하는 기능을 가진 문자열을 생성할 수 있다.
3. 유니코드는 전 세계의 모든 문자들을 컴퓨터에서 표현하고자 각각의 문자에 대해 고유의 코드를 부여한 것.
여러가지 인코딩을 통해서 크기를 줄이지 않으면 모든 문자가 4바이트로 표현되므로 비효율적임
4. string_view 를 통해서 불필요한 복사를 막고, const char* 과 const string& 사이에서 깔끔하게 처리할 수 있다.