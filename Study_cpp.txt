9-3 강 템플릿 메타 프로그래밍(Template Meta programming

- 타입이 아닌 템플릿 인자
-using 키워드 사용


일반화 프로그래밍(generic programming) : 템플릿을 통해서 타입이 마치 인자인 것 처럼 사용하는 프로그래밍 방식

템플릿 인자로는 타입 뿐 만이 아니라 특정한 조건을 만족하는 값들도 올 수 있다.

wrapper 클래스에서 
Array<int, 5> 와 Array<int, 3> 은 서로 다른 클래스이다.
왜냐하면 템플릿 인자로 서로 다른 5 와 3을 전달했기 때문이다.
따라서 typeid 를 이용해서 둘을 비교하면 다르다고 나온다.

아무튼 이렇게 타입에 어떠한 값을 부여하면 런타임이 아니라 컴파일 시에 값을 컴파일러가 미리 치환하게 된다.

이러한 타입을 가지고 컴파일 타임에 생성되는 코드로 프로그래밍을 하는 것을 메타 프로그래밍 이라고 한다.
C++ 의 경우는 템플릿을 가지고 이러한 작업을 하므로, 템플릿 메타 프로그래밍 이라고 한다.

모든 for 문으로 구현 가능한 코드는 모두 템플릿 메타 프로그래밍으로 구현할 수 있다.
또한 if 문도 구현 가능하다.

- TMP(템플릿 메타 프로그래밍) 을 사용하는 이유
어떠한 C++ 코드도 TMP 로 변환 가능하다.
TMP 로 작성된 코드는 모두 컴파일 타임에 모든 연산이 끝나기 때문에 프로그램 실행 속도를 향상 시킬 수 있다.
하지만 컴파일 시간은 매우 길어진다.
하지만 당연히 TMP 로 프로그램 전체를 구현하는 일은 없다. 일단 TMP 는 매우 복잡하며 TMP 로 작성된 코드는 버그를 찾는 것이 매우 어렵다. 컴파일 타임에 연산을 하므로 디버깅이 불가능하다.

컴퓨터 상에서 두 수의 최대 공약수를 구하기 위해서 유클리드 호제법을 사용한다.

C++11 부터는 typedef 대신에 좀 더 직관적인 키워드인 using 을 사용한다.
typedef 와 using 은 서로 동일한 의미를 가지지만 using 을 사용할 경우 좀 더 직관적인 이해를 도울 수 있다.

typedef void (*func)(int ,int); 라는 코드를
using func = void (*)(int, int); 라는 코드로 쓸 수 있다
이러면 좀 더 직관적으로 표현 가능하다.