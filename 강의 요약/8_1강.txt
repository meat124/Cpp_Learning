8-1강 Excel 만들기 프로젝트

자료구조 : 컴퓨터에서 데이터를 저장하는 방식 
>어떻게 구현하냐에 따라서 장단점에 존재한다. 장점만을 가진 자료구조는 없으며 항상 무언가를 위해 무언가를 포기해야 한다.
상황에 맞는 자료구조의 적용 필요

벡터(Vector) : 배열의 크기를 마음대로 조절할 수 있는 가변길이 배열. 배열처럼 [] 연산자로 임의의 위치에 있는 원소에 마음대로 접근 가능하며, 임의의 위치에 원소를 추가하거나 뺄 수 있다.

스택(Stack) : 항상 최상단에 있는 데이터에만 접근 가능. 새로운 데이터를 추가하면 최상단에 오르게 됨. 데이터 추가를 push, 데이터 삭제를 pop 이라 한다.

스택은 링크드 리스트를 이용해서 구현을 한다. 노드를 이용하는데 이때 노드들을 연결하려면 각각의 노드들은 자기 하위 노드들만 가리키면 된다. 새로운 노드가 추가되면 새 노드를 생성하고 최상위 노드를 가리키게 하면 된다.

-벡터 클래스
생성자에서 인자에 int n = 1 을 넣었다. 이는 디폴트 인자(Default argument)라는 것으로 사용자가 인자를 지정하지 않아도 자동으로 디폴트 인자 값으로 초기화가 된다.
디폴트 인자를 만약 클래스 내부 함수 선언에서 디폴트 인자를 명시하였다면 함수 본체에서는 명시하면 안되고, 반대로 함수 본체에서 선언하였다면, 클래스 내부 함수에서는 명시하면 안된다. 이는 C++ 규칙이다.

푸시에서 항상 처음에 현재 할당된 용량보다 현재 길이가 더 큰 경우를 고려해서 if 문을 작성해야 한다.
만약 현재 길이가 할당된 용량보다 크다면, 기존의 할당된 메모리를 해제하고 다시 그 두 배 만큼 할당한다.
1을 늘리는 것이 아니라 2 배로 늘리면 효율적으로 공간과 시간을 활용 가능하다.

-스택 클래스
스택의 경우 링크드 리스트(Linked list) 를 사용하므로 데이터를 보관하기 위해서 배열을 사용하는 것이 아니라 하나의 노드를 만들어서 노드들을 체인처럼 엮을 것이다. 이를 위해 Stack 클래스 안에 Node 라는 구조체를 정의한다.
Node 들의 리스트를 정확하게 관리하기 위해서, 최상위 노드와 최하위 노드를 가리키는 포인터를 각각 정의한다.
그 이유는, 스택이 마지막 노드에 도달하였을 때 그 여부를 알아야 하기 때문이다.

소멸자는 최상위 원소에서 바닥 원소까지 전부 메모리에서 해제시켜야 완전히 Stack 객체를 소멸시킬 수 있다.
따라서 소멸자에서 current 포인터가 &start 레퍼런스와 같아질 때 까지 계속해서 delete prev를 통해 메모리 할당을 해제한다.


Table 클래스는 Cell 객체들을 2차원 배열로 보관하게 된다. 객체 자체를 보관하는 것은 아니고, 필요할 때 마다 동적으로 생성된다. 그리고 그 객체에 대한 포인터를 2차원 배열로 보관하는 것

동적할당으로 Cell* 배열을 생성한 후에, Cell 객체가 필요할 때 마다 생성해서 배열의 원소들이 이를 가리킬 수 있게 한다.
3차원 포인터 배열을 해제하기 위해서는 소멸자에서 먼저 Cell 객체를 모두 지우고, 그 다음 Cell 배열(1차원)을 지우고, 마지막으로 2차원 테이블 자체를 메모리에서 해제한다.
>총 3 단계에 걸쳐서 메모리에서 Cell을 해제할 수 있다.

>총 3 단계에 걸쳐서 메모리에서 Cell을 해제할 수 있다.

Table의 셀을 등록하는 함수인 reg_cell


std::ostream& operator<<(std::ostream& o, Table& table)
ostream 클래스의 << 연산자를 오버로딩하는 함수
>>파일이나 표준 스트림(cout)의 입출력에 쉽게 사용하기 위함
Table 클래스의 객체는 생성하기 불가 > table.print_table(); 에서 print_table 함수는 선언이 다음과 같다.
virtual string print_table() = 0;
virtual 로 선언된 함수는 상속받은 클래스에서 접근이 가능하다. 따라서 Table 클래스 자체에서는 table 을 이용한 객체 생성이 불가하고, 이 Table 클래스를 상속받는 다른 클래스를 만들어서 이 함수를 구현해야 한다.
따라서 새로운 클래스인 TxtTable 클래스를 생성한다.

string 클래스의 멤버 함수
1. to_string(int num) : 숫자 타입의 데이터를 string 타입으로 변환
2. push_back(char c) : 함수를 호출하는 스트링의 맨 뒤에 문자 c 를 더하는 함수